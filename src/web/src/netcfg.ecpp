<#
 #
 # Copyright (C) 2015 - 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file netcfg.ecpp
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Tomas Halman <TomasHalman@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Gerald Guillaume <GeraldGuillaume@Eaton.com>
 * \brief  Returns information about network configuration
 */
 #><%pre>
#include <cxxtools/split.h>
#include <cxxtools/jsondeserializer.h>
#include <cxxtools/regex.h>
#include <vector>
#include <string>
#include <string.h>

#include "shared/augtool.h"
#include "shared/cidr.h"
#include "web/src/iface.h"
#include <fty_common_macros.h>
#include <fty_common_mlm_subprocess.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_rest_audit_log.h>

using namespace shared;

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "RU"}
            };
    std::string audit_msg;
    if (request.getMethod () == "PUT")
        audit_msg = std::string ("Request CREATE OR UPDATE netcfg FAILED");
    CHECK_USER_PERMISSIONS_OR_DIE_AUDIT (PERMISSIONS, audit_msg.empty () ? nullptr : audit_msg.c_str ());

augtool* augeas = augtool::get_instance ();
if (!augeas) {
    std::string err =  TRANSLATE_ME ("Cannot communicate with augtool. Is it installed or properly configured?");
    if (request.getMethod () == "PUT") {
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
    }
    http_die ("internal-error", err.c_str ());
}
std::string nil;

// Make sure we have data that works
nil = augeas->get_cmd_out ("ls /augeas/files/etc/network/interfaces/error");
if (!nil.empty ()) {
    std::string err =  TRANSLATE_ME ("Syntax error in /etc/network/interfaces config file");
    if (request.getMethod () == "PUT") {
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
    }
    http_die ("internal-error", err.c_str ());
}
nil = augeas->get_cmd_out ("ls /augeas/files/etc/resolv.conf/error");
if (!nil.empty ()) {
    std::string err =  TRANSLATE_ME ("Syntax error in /etc/resolv.conf config file");
    if (request.getMethod () == "PUT") {
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
    }
    http_die ("internal-error", err.c_str ());
}

// Are we asked to just list possible configurations?
static cxxtools::Regex rex_ncfg ("^.*/netcfgs$");
if (rex_ncfg.match (request.getUrl ())) {
    std::string all_interfaces_str = augeas->get_cmd_out ("match /files/etc/network/interfaces/iface[*]",
							 true, ",",
							 [](const std::string iface) -> bool {
							 	return iface == "lo";
							 }
							);
    if (all_interfaces_str.empty ()) {
        std::string err =  TRANSLATE_ME ("No configurable interfaces found");
        if (request.getMethod () == "PUT") {
            log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
        }
        http_die ("internal-error", err.c_str ());
    }

    std::set<std::string> active_interfaces = get_ifaces ();
    std::vector<std::string> all_interfaces;
    cxxtools::split (",", all_interfaces_str, std::back_inserter (all_interfaces));

    std::string out;
    for (std::string iface : all_interfaces) {
        if (active_interfaces.find (iface) != active_interfaces.end ()) {
            out += "\"" + iface + "\",";
        }
    }
    // remove trailing comma
    out.pop_back ();
</%cpp>
{ "netcfgs": [ <$$ out $> ] }
<%cpp>
    if (request.getMethod () == "PUT") {
        log_info_audit ("Request CREATE OR UPDATE netcfg SUCCESS");
    }
    return HTTP_OK;
}

// We are discussing interface configuration, are we asked about real interface?
std::string checked_iface;
{
    std::string iface = request.getArg ("iface");
    if (iface.empty ()) {
        if (request.getMethod () == "PUT") {
            log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
        }
        http_die ("request-param-required", "iface");
    }
    std::string audit_msg;
    if (request.getMethod () == "PUT") {
        audit_msg = std::string ("Request CREATE OR UPDATE netcfg FAILED");
    }
    check_regex_text_or_die_audit ("iface", iface, checked_iface, "^[[:alpha:]][[:alnum:]]{0,14}$",
            audit_msg.empty () ? nullptr : audit_msg.c_str ());
}

// Where is the tree reflecting the interface?
std::string address = augeas->get_cmd_out (
                      "match /files/etc/network/interfaces/iface[*] " + checked_iface,
					  false);
if (address.empty ()) {
    // Not perfect, but bad enough to create another message?
    if (request.getMethod () == "PUT") {
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
    }
    http_die ("element-not-found", checked_iface.c_str ());
}

#define AUG_GET(NAME, VAL) \
    VAL = augeas->get_cmd_out ("get " + address + "/" NAME);

std::string method;
AUG_GET ("method", method);

// Modifications requested?
if (request.getMethod () == "PUT") {
    std::stringstream input (request.getBody (), std::ios_base::in);
    cxxtools::SerializationInfo si;
    cxxtools::SerializationInfo rsi;
    cxxtools::JsonDeserializer deserializer (input);
    std::string val;
    try {
        deserializer.deserialize (si);
    } catch (const std::exception& e) {
        std::string msg = TRANSLATE_ME ("Expected valid json document: %s", JSONIFY (e.what ()).c_str ());
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
        http_die ("bad-request-document",  msg.c_str ());
    }

    try {
        rsi = si.getMember (checked_iface);
    } catch (const std::exception& e) {
        std::string msg = TRANSLATE_ME ("No configuration for interface '%s' provided", checked_iface.c_str ());
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
        http_die ("bad-request-document", msg.c_str ());
    }


// Gets configuration from json and sets it in config while verifying it matches regexp
#define AUG_SET(NAME, CHECK)         \
    if (it.name () == NAME) { \
        it.getValue (val); \
        if (! CHECK ) { \
            std::string msg = TRANSLATE_ME ("Wrong value for '%s' setting or setting not expected for method %s.", NAME, method.c_str ()); \
            if (request.getMethod () == "PUT") { \
                log_error_audit ("Request CREATE OR UPDATE netcfg FAILED"); \
            } \
            http_die ("parameter-conflict", msg.c_str ()); \
        } \
        augeas->run_cmd ("set " + address + "/" NAME " " + val); \
        handled = true; \
    }

    // All the things we need to set
    for (auto it : rsi) {
        bool handled = false;
        static cxxtools::Regex rex_mtd ("^(dhcp|static|none|manual)$");
        AUG_SET ("method",  rex_mtd.match (method));
        AUG_GET ("method",  method);
        AUG_SET ("address", (CIDRAddress (val).valid ()     && method == "static"));
        AUG_SET ("netmask", (CIDRAddress (val).isNetmask () && method == "static"));

        if (method != "static") {
            augeas->run_cmd ("rm " + address + "/address");
            augeas->run_cmd ("rm " + address + "/netmask");
            augeas->run_cmd ("rm " + address + "/gateway");
        }

        //gateway could be unset, handle it differently
        if (it.name () == "gateway" && method == "static") {
            it.getValue (val);
            if (val.empty ()){
                augeas->run_cmd ("rm " + address + "/gateway");
            }else{
                if (! CIDRAddress (val).valid () ) {
                    std::string msg = TRANSLATE_ME ("Wrong value for 'gateway' setting or setting not expected for method %s.", method.c_str ());
                    log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
                    http_die ("parameter-conflict", msg.c_str ());
                }
                augeas->run_cmd ("set " + address + "/gateway " + val);
            }
            handled = true;
        }

        //DNS is array, handle differently
        if (it.name () == "nameservers") {
            if (it.category () != cxxtools::SerializationInfo::Category::Array) {
                std::string err =  TRANSLATE_ME ("Wrong value for DNS setting - array expected");
                log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
                http_die ("bad-request-document", err.c_str ());
            }
            // get all interface from /etc/network/interfaces
            std::vector<std::string> interfaces;
            std::string in = augeas->get_cmd_out_raw ("match /files/etc/network/interfaces/iface[*]");
            cxxtools::split ("\n", in, std::back_inserter (interfaces));

            std::string ns_list = "";
            // Build the list of nameservers
            for (auto i : it) {
                i.getValue (val);
                if (!CIDRAddress (val).valid ()) {
                    std::string err =  TRANSLATE_ME ("Wrong value for DNS setting - array of IPs expected") ;
                    log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
                    http_die ("bad-request-document", err.c_str ());
                }
                if (ns_list.length ()>0){
                    ns_list += " " + val;
                }else{
                    ns_list = val;
                }
            }
            log_debug ("Nameservers list = '%s'", ns_list.c_str ());
            // Now set nameservers for each interfaces
            for (auto iface : interfaces) {
                log_debug ("Processing interface %s", iface.c_str ());
                //avoid lo interface and some augtool cli weird iface
                if (iface.find ("lo")==std::string::npos
                        && iface.find ("*")==std::string::npos
                        && iface.find ("]")!=std::string::npos) {
                    std::size_t found = iface.find ("]");
                    std::string sub_iface=iface.substr (0,found+1);
                    char *path;
                    if (ns_list.empty ()){
                        log_debug ("rm %s/dns-nameservers",sub_iface.c_str ());
                        path = zsys_sprintf ("rm %s/dns-nameservers",
                                sub_iface.c_str ());
                    }else{
                        log_debug ("set %s/dns-nameservers '%s'",
                                sub_iface.c_str (), ns_list.c_str ());
                        path = zsys_sprintf ("set %s/dns-nameservers '%s'",
                                sub_iface.c_str (), ns_list.c_str ());
                   }
                   augeas->run_cmd (std::string (path));
                }
            }
            handled = true;
        }
        if (!handled) {
            std::string msg = TRANSLATE_ME ("Invalid option '%s'", it.name ().c_str ());
            log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
            http_die ("bad-request-document", msg.c_str ());
        }
    }

    // Commit everything
	augeas->save ();

    // Make sure we have data that works
	nil = augeas->get_cmd_out ("ls /augeas/files/etc/network/interfaces/error");
    if (!nil.empty ()) {
        std::string err =  TRANSLATE_ME ("Syntax error in /etc/network/interfaces config file");
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
        http_die ("internal-error", err.c_str ());
    }
	nil = augeas->get_cmd_out ("ls /augeas/files/etc/resolv.conf/error");
    if (!nil.empty ()) {
        std::string err =  TRANSLATE_ME ("Syntax error in /etc/resolv.conf config file");
        log_error_audit ("Request CREATE OR UPDATE netcfg FAILED");
        http_die ("internal-error", err.c_str ());
    }

    log_info_audit ("Request CREATE OR UPDATE netcfg SUCCESS");
}

std::string ip, netmask, gateway, dns;
AUG_GET ("method", method);
AUG_GET ("address", ip);
AUG_GET ("netmask", netmask);
AUG_GET ("gateway", gateway);

if (request.getMethod() == "PUT")
{
    std::string dnsRawData = augeas->get_cmd_out ("match /files/etc/network/interfaces/iface[*]/dns-nameservers", true, " ");

    std::set<std::string> dnsSet;
    cxxtools::split (" ", dnsRawData, std::inserter (dnsSet, dnsSet.end()));

    std::string dnsStr;
    for (auto ip : dnsSet)
    {
        dnsStr += "\"";
        dnsStr += ip;
        dnsStr += "\"";
        dnsStr += ",";
    }
    // remove trailing punctuation
    dns = dnsStr.substr(1, dnsStr.size() -3);
}
else
{
    dns = augeas->get_cmd_out ("match /files/etc/resolv.conf/nameserver", true, "\", \"");
}

</%cpp>
{ "<$ checked_iface $>":
    {
        "method": "<$ method $>"
% if (!ip.empty ()) {
      , "address": "<$ ip $>"
% }
% if (!netmask.empty ()) {
      , "netmask": "<$ netmask $>"
% }
% if (!gateway.empty ()) {
      , "gateway": "<$ gateway $>"
% }
% if (!dns.empty ()) {
      , "nameservers": [ "<$$ dns $>" ]
% }
    }
}
