<#
 #
 # Copyright (C) 2015 - 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_PUT.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Implementation of PUT (update) operation on any asset
 */
 #><%pre>
#include <sys/types.h>
#include <unistd.h>

#include <cxxtools/jsondeserializer.h>
#include <fty_common_db_asset.h>
#include <fty_common.h>
#include <fty_common_rest_helpers.h>

#include "shared/configure_inform.h"
#include "src/db/inout.h"
#include <fty_common_rest_audit_log.h>
#include <fty_asset_activator.h>

#define AGENT_ASSET_ACTIVATOR "etn-licensing-credits"

</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        log_error_audit ("Request CREATE OR UPDATE asset FAILED");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "U"}
            };
    std::string audit_msg = std::string ("Request CREATE OR UPDATE asset FAILED");
    CHECK_USER_PERMISSIONS_OR_DIE_AUDIT (PERMISSIONS, audit_msg.empty () ? nullptr : audit_msg.c_str ());
    std::string id = request.getArg ("id");

    if (id.empty () || !persist::is_ok_name (id.c_str ())) {
        log_error_audit ("Request CREATE OR UPDATE asset FAILED");
        http_die ("request-param-bad", id.c_str ());
    }

    std::string asset_json (request.getBody());
    // Read json, transform to csv, use existing functionality
    cxxtools::SerializationInfo si;
    // read json a deserialize it
    try {
        std::stringstream input (asset_json, std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);
        auto si_id = si.findMember ("id");
        std::string status;
        si.getMember ("status") >>= status;
        std::string type;
        si.getMember ("type") >>= type;

        if ( si_id == NULL ) {
            si.addMember("id") <<= id;
        }
        else if (status  == "nonactive") {
            if (id == "rackcontroller-0"     ||
                persist::is_container (type)){
                log_debug ("Element %s cannot be inactivated.", si_id);
                log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
                std::string err =  TRANSLATE_ME ("Inactivation of this asset");
                http_die ("action-forbidden", err.c_str ());
            }
        }
        else {
            si_id->setValue(id);
        }
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        std::string err = JSONIFY (e.what());
        http_die("bad-request-document", err.c_str ());
    }

    try
    {
        fty::FullAsset asset;
        si >>= asset;

        if (asset.isPowerAsset () && asset.getStatusString() == "active")
        {
            mlm::MlmSyncClient client (AGENT_FTY_ASSET, AGENT_ASSET_ACTIVATOR);
            fty::AssetActivator activationAccessor (client);
            if (!activationAccessor.isActivable (asset))
            {
                throw std::runtime_error ("Asset cannot be activated");
            }
        }
    }
    catch (const std::exception &e)
    {
        std::string err = JSONIFY (e.what());
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        http_die ("licensing-err", err.c_str ());
    }

    shared::CsvMap cm;
    try{
        cm = shared::CsvMap_from_serialization_info (si);
        cm.setUpdateUser (user.login ());
        std::time_t timestamp = std::time (NULL);
        char mbstr[100];
        if (std::strftime (mbstr, sizeof (mbstr), "%FT%T%z", std::localtime (&timestamp))) {
            cm.setUpdateTs (std::string (mbstr));
        }
    }
    catch (const std::invalid_argument &e) {
        log_error ("%s", e.what ());
        std::string err = JSONIFY (e.what ());
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        http_die ("bad-request-document", err.c_str ());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL (e);
        std::string err =  TRANSLATE_ME ("See log for more details");
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        http_die ("internal-error", err.c_str ());
    }

    // PUT /asset is currently used to update an existing device (only asset_element and ext_attributes)
    //      for EMC4J.
    // empty document
    if (cm.cols () == 0 || cm.rows () == 0) {
        std::string err =  TRANSLATE_ME ("Cannot import empty document.");
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        http_die ("bad-request-document", err.c_str ());
    }
    if (!cm.hasTitle ("type")) {
        std::string err =  TRANSLATE_ME ("type");
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        http_die ("request-param-required", err.c_str ());
    }

    // currently we do not need to support updatein these elements
    log_debug ("starting load");
    try {
        // actual update - throws exceptions
        auto row = persist::process_one_asset (cm);

        // here we are -> update was successful
        // ATTENTION:  1. sending messages is "hidden functionality" from user
        //             2. if any error would occur during the sending message,
        //                user will never know if element was actually inserted
        //                or not

        // this code can be executed in multiple threads -> agent's name should
        // be unique at the every moment
        std::string agent_name = utils::generate_mlm_client_id ("web.asset_put");
        try{
            send_configure (row.first, row.second, agent_name);
        }
        catch (const std::runtime_error &e) {
            log_error ("%s", e.what ());
            std::string msg = TRANSLATE_ME ("Error during configuration sending of asset change notification. Consult system log.");
            log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
            http_die ("internal-error", msg.c_str ());
        }
        // no unexpected errors was detected
        // process results
        std::pair<std::string, std::string> asset_names = DBAssets::id_to_name_ext_name (row.first.id);
        if (asset_names.first.empty () && asset_names.second.empty ()) {
            std::string err =  TRANSLATE_ME ("Database failure");
            log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
            http_die ("internal-error", err.c_str ());
        }

</%cpp>
{<$$ utils::json::jsonify ("id", asset_names.first) $>}
<%cpp>
        log_info_audit ("Request CREATE OR UPDATE asset id %s SUCCESS", id.c_str ());
        return HTTP_OK;
    }
    catch (const BiosError& e) {
        LOG_END_ABNORMAL (e);
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        http_die_idx (e.idx, e.what ());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL (e);
        std::string err =  TRANSLATE_ME ("Consult system log");
        log_error_audit ("Request CREATE OR UPDATE asset id %s FAILED", id.c_str ());
        http_die ("internal-error", err.c_str ());
    }
}
</%cpp>
