<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_POST.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Implementation of POST (create) operation on any asset
 */
 #><%pre>
#include <sys/types.h>
#include <unistd.h>

#include <cxxtools/jsondeserializer.h>
#include <cxxtools/serializationinfo.h>
#include "shared/configure_inform.h"
#include "shared/messagebus_utils.h"
#include "db/inout.h"
#include <fty_asset_dto.h>
#include <asset/conversion/json.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_db_asset.h>
#include <fty_common_macros.h>
#include <fty_common_messagebus.h>
#include <fty_common_rest_audit_log.h>
#include <fty_asset_activator.h>

#define AGENT_ASSET_ACTIVATOR "etn-licensing-credits"

</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        log_error_audit ("Request CREATE asset FAILED");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "C"}
            };
    std::string audit_msg = std::string ("Request CREATE asset FAILED");
    CHECK_USER_PERMISSIONS_OR_DIE_AUDIT (PERMISSIONS, audit_msg.empty () ? nullptr : audit_msg.c_str ());

    // cache the manipulated asset name
    std::string item;
    try {
        auto item_pos1 = request.getBody ().find ("\"name\"");
        auto item_pos2 = request.getBody ().find_first_of ('"', item_pos1 + strlen ("\"name\"") + 1);
        auto item_pos3 = request.getBody ().find_first_of ('"', item_pos2 + 2);
        item = request.getBody ().substr (item_pos2 + 1, item_pos3 - item_pos2 - 1);
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL (e);
        log_error_audit ("Request CREATE asset <undefined> FAILED");
        http_die ("bad-request-document", e.what ());
    }

    std::string asset_json (request.getBody());

    // Read json, transform to csv, use existing functionality
    cxxtools::SerializationInfo si;
    // read json a deserialize it
    fty::Asset asset;
    try {
        using namespace fty::conversion;
        std::stringstream input (asset_json, std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);

        si >>= asset;
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL (e);
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die ("bad-request-document", e.what ());
    }

    std::string assetJson = fty::conversion::toJson(asset);

    shared::CsvMap cm;
    try{
        cm = shared::CsvMap_from_serialization_info (si);
        cm.setCreateUser (user.login ());
        cm.setCreateMode (CREATE_MODE_ONE_ASSET);
    }
    catch (const std::invalid_argument &e) {
        log_error ("%s", e.what ());
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die ("bad-request-document", e.what ());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL (e);
        std::string err =  TRANSLATE_ME ("See logs for more details");
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die ("internal-error", err.c_str ());
    }

    if (cm.cols () == 0 || cm.rows () == 0) {
        std::string err =  TRANSLATE_ME ("Cannot import empty document.");
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die ("bad-request-document", err.c_str ());
    }
    // in underlying functions like update_device
    if (!cm.hasTitle ("type")) {
        std::string err =  TRANSLATE_ME ("type");
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die ("request-param-required", err.c_str ());
    }
    if (cm.hasTitle ("id")) {
        std::string err =  TRANSLATE_ME ("key 'id' is forbidden to be used");
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die ("bad-request-document", err.c_str ());
    }

    try {
        // actual insert - throws exceptions
        auto resp = sendRequest("CREATE", assetJson);

        // here we are -> insert was successful
        // ATTENTION:  1. sending messages is "hidden functionality" from user
        //             2. if any error would occur during the sending message,
        //                user will never know if element was actually inserted
        //                or not

        // this code can be executed in multiple threads -> agent's name should
        // be unique at the every moment
        std::string agent_name = utils::generate_mlm_client_id ("web.asset_post");
        try{
            send_configure(std::vector<fty::Asset>{asset}, FTY_PROTO_ASSET_OP_CREATE, agent_name);
        }
        catch (const std::runtime_error &e) {
            log_error ("%s", e.what ());
            std::string msg = TRANSLATE_ME ("Error during configuration sending of asset change notification. Consult system log.");
            log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
            http_die ("internal-error", msg.c_str ());
        }
        // no unexpected errors was detected
        // process results
        std::pair<std::string,std::string> foo =  std::make_pair(asset.getInternalName(), asset.getExtEntry("name"));
        if (foo.first.empty () && foo.second.empty ()) {
            std::string err =  TRANSLATE_ME ("Database failure");
            log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
            http_die ("internal-error", err.c_str ());
        }
</%cpp>
{<$$ utils::json::jsonify ("id", foo.first) $>}
<%cpp>
        log_info_audit ("Request CREATE asset %s SUCCESS", item.c_str ());
        return HTTP_OK;
    }
    catch (const BiosError& e) {
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die_idx (e.idx, e.what ());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL (e);
        log_error_audit ("Request CREATE asset %s FAILED", item.c_str ());
        http_die ("internal-error", "");
    }
}
</%cpp>
